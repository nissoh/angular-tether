

// default tooltip height
$tooltipPaddingX: 10px !default;
$tooltipPaddingY: 2px !default;
$arrowBorderSize: 6px !default;
$transitionDistance: 8px !default;
$arrowOffsetX: 2 * $arrowBorderSize !default;
$tooltipHeight: $baseLineHeight + $tooltipPaddingY !default;
$backgroundColor : $gold !default;
$tooltipTextColor : $white !default;

// Mixins
@mixin vertical-positioned-tooltip($propertyY, $transitionDirection) {
	&:before {
		// get the arrow out
		margin-#{$propertyY}: -2 * $arrowBorderSize;
	}

	&:after {
		// bring back the tooltip by some offset so that arrow doesn't stick at end
		margin-left: -1 * $arrowOffsetX;
	}

	&:before, &:after {
		#{$propertyY}: 100%;
		left: 50%;
	}

	&:hover:before, &:hover:after {
		-webkit-transform: translateY($transitionDirection * $transitionDistance);
		-moz-transform: translateY($transitionDirection * $transitionDistance);
		-ms-transform: translateY($transitionDirection * $transitionDistance);
		transform: translateY($transitionDirection * $transitionDistance);
	}
}
@mixin horizontal-positioned-tooltip($propertyX, $transitionDirection) {
	&:before {
		// get the arrow out
		margin-#{$propertyX}: -2 * $arrowBorderSize;
		// bring back to center
		margin-bottom: -1 * $arrowBorderSize;
	}

	&:after { margin-bottom: -17px; }

	&:before, &:after {
		#{$propertyX}: 100%;
		bottom: 50%;
	}

	&:hover:before, &:hover:after {
		-webkit-transform: translateX($transitionDirection * $transitionDistance);
		-moz-transform: translateX($transitionDirection * $transitionDistance);
		-ms-transform: translateX($transitionDirection * $transitionDistance);
		transform: translateX($transitionDirection * $transitionDistance);
	}
}
@mixin arrow-border-color($color, $isInsideSelector: "true") {
	@each $position in top, bottom, left, right {
		// if the current mixin is called from within a selector, use a '&'. Otherwise not.
		@if $isInsideSelector == "true" {
			&.Tooltip__#{$position}:before {
				border-#{$position}-color: $color;
			}
		}
		@else {
			.Tooltip__#{$position}:before {
				border-#{$position}-color: $color;
			}
		}
	}
}
@mixin set-margin($property, $transitionDirection) {
	&:after, &:before {
		-webkit-transform: #{$property}($transitionDirection * $transitionDistance);
		-moz-transform: #{$property}($transitionDirection * $transitionDistance);
		-ms-transform: #{$property}($transitionDirection * $transitionDistance);
		transform: #{$property}($transitionDirection * $transitionDistance);
	}
}

// Base Class
[data-tooltip] {
	position: relative;
	display: inline-block;

	&:before, &:after {
		position: absolute;

		// Hhardware accelerated rendering
		@include translate3d(0,0,0);

		// HACK: visibility is set to hidden because IE & Opera don't support
		// pointer-events on HTML content yet because of which hovering a hidden tooltip
		// shows the tooltip.
		visibility: hidden;
		opacity: 0;
		z-index: 1000000;
		// shouldn't receive pointer events, otherwise even hovering tooltip will make it appear
		pointer-events: none;

		// pseudo element transition is gonna come soon: https://bugs.webkit.org/show_bug.cgi?id=92591
		@include transition(0.3s ease);
	}

	&:hover:before, &:hover:after {
		visibility: visible;
		opacity: 1;
	}

	&:before {
		content: '';
		position: absolute;
		background: transparent;
		border: $arrowBorderSize solid transparent;
		// move z-index 1 up than :after so that it shows over box-shadow
		z-index: 1000001;
	}
	&:after {
		content: attr(data-tooltip);
		background: $backgroundColor;
		color: $tooltipTextColor;
		padding: $tooltipPaddingY $tooltipPaddingX;
		white-space: nowrap;
		word-break: break-all;
		@include border-radius(3px);
		//box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);
		max-width: 430px;
	}
}

@include arrow-border-color($backgroundColor, 'false');

.Tooltip__top {        @include vertical-positioned-tooltip('bottom', -1); }
.Tooltip__bottom {     @include vertical-positioned-tooltip('top', 1); }
.Tooltip__right {      @include horizontal-positioned-tooltip('left', 1); }
.Tooltip__left {       @include horizontal-positioned-tooltip('right', -1); }


.Tooltip__always {
	&:after, &:before {
		opacity: 1;
		visibility: visible;
	}

	&.Tooltip__top {    @include set-margin('translateY', -1); }
	&.Tooltip__bottom { @include set-margin('translateY', 1); }
	&.Tooltip__left {   @include set-margin('translateX', -1); }
	&.Tooltip__right {  @include set-margin('translateX', 1); }
}