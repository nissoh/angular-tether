// Mixins.less
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------

// Prefixer, babysitting the browser
@mixin prefixer($property, $value, $prefixes) {
	@each $prefix in $prefixes {
		@if $prefix {
			-#{$prefix}-#{$property}: $value;
		}
	}
	#{$property}: $value; // Default w/o a prefix
}


// UTILITY MIXINS
// --------------------------------------------------

// rotate
@mixin rotate($degrees) {
	-webkit-transform: rotate(#{$degrees}deg);
	-moz-transform: rotate(#{$degrees}deg);
	-ms-transform: rotate(#{$degrees}deg);
	-o-transform: rotate(#{$degrees}deg);
	transform: rotate(#{$degrees}deg);
}

// Clearfix
// --------
// Clearing floats like a boss h5bp.com/q
@mixin clearfix {
	&:before,
	&:after {
		display: table;
		content: "";
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
// Default
	outline: thin dotted #333;
// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Sizing shortcuts
// -------------------------
@mixin size($height, $width) {
	width: $width;
	height: $height;
}

@mixin square($size) {
	@include size($size, $size);
}

// Font shorthanded
// -------------------------
@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}

// Transitions
@mixin transition($transition...) {                     @include prefixer(transition, $transition, webkit moz o); }
@mixin transition-delay($transition-delay) {            @include prefixer(transition-delay, $transition-delay, webkit moz o); }
@mixin transition-duration($transition-duration) {      @include prefixer(transition-duration, $transition-duration, webkit moz o); }

// Transforms
@mixin transform($transform...) {                       @include prefixer(transform, $transform, webkit moz o); }
@mixin transform-origin($transform-origin-x: 50%,
						$transform-origin-y: null) {    @include prefixer(transform-origin, $transform-origin-x $transform-origin-y, webkit moz o); }
@mixin rotateX($rotateX) {                              @include prefixer(transform, rotateX($rotateX), webkit moz o); }
@mixin rotateY($rotateY) {                              @include prefixer(transform, rotateY($rotateY), webkit moz o); }
@mixin rotateZ($rotateZ) {                              @include prefixer(transform, rotateZ($rotateZ), webkit moz o); }
@mixin scale($ratio) {                                  @include prefixer(transform, scale($ratio), webkit moz o); }
@mixin translate($x, $y) {                              @include prefixer(transform, translate($x, $y), webkit moz o); }
@mixin translate3d($translate3d...) {                   @include prefixer(transform, translate3d($translate3d), webkit moz o); }
@mixin translateX($x) {                                 @include prefixer(transform, translateX($x), webkit moz o); }
@mixin translateY($y) {                                 @include prefixer(transform, translateY($y), webkit moz o); }
@mixin translateZ($z) {                                 @include prefixer(transform, translateZ($z), webkit moz o); }
@mixin perspective($perspective) {                      @include prefixer(transform, perspective($perspective), webkit moz o); }
@mixin perspective-origin($x, $y) {                     @include prefixer(transform, perspective-origin($x, $y), webkit moz o); }

// etc
@mixin backface-visibility($visibility){                @include prefixer(backface-visibility, $visibility, webkit moz); }
@mixin animation($anim...) {                            @include prefixer(animation, $anim, webkit moz); }
@mixin animation-name($animName) {                      @include prefixer(animation-name, $animName, webkit moz); }
@mixin animation-fill-mode($animName) {                 @include prefixer(animation-fill-mode, $animName, webkit moz); }
@mixin background-clip($clip) {                         @include prefixer(background-clip, $clip, webkit moz); }
@mixin background-size($size) {                         @include prefixer(background-size, $size, webkit moz o); }
@mixin box-sizing($boxmodel) {                          @include prefixer(box-sizing, $boxmodel, webkit moz); }
@mixin user-select($select) {                           @include prefixer(user-select, $select, webkit moz ms o); }
@mixin border-radius($radius) {                         @include prefixer(border-radius, $radius, webkit); }
@mixin box-shadow($shadow...) {                         @include prefixer(box-shadow, $shadow, webkit); }
@mixin filter($filter...) {                             @include prefixer(filter, $filter, webkit moz ms o); }


// Resize anything
@mixin resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
	filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
}

// Block level inputs
@mixin input-block-level {
	display: block;
	width: 100%;
	min-height: 18px;
	@include box-sizing(border-box);
}


// shorthand to stretch element height and width

@mixin stretch($offset-top:0, $offset-right:0, $offset-bottom:0, $offset-left:0) {
  position: absolute;
  @if $offset-top { top: $offset-top; }
  @if $offset-bottom { bottom: $offset-bottom; }
  @if $offset-left { left: $offset-left; }
  @if $offset-right { right: $offset-right; }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow($truncation-boundary: 100%){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text {
	font: 0/0 a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}


// BACKGROUNDS
// --------------------------------------------------

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
  background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}

@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include background-clip(padding-box);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor, $textColor: #fff, $textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
  color: $textColor;
  text-shadow: $textShadow;
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// Gradients
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
  background-image: linear-gradient(to right, $startColor, $endColor); // Standard, IE10
  background-repeat: repeat-x;
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=1)"); // IE9 and down
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: $endColor;
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
  background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
  background-repeat: repeat-x;
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0)"); // IE9 and down
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
  background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10
}
@mixin gradient-horizontal-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient(left, $startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(left, $startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient(to right, $startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0)"); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0)"); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: #555, $angle: 45deg) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}

// Reset filters for IE
@mixin reset-filter() {
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(enabled=false)");
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
	height: 1px;
	margin: (($baseLineHeight / 2) - 1) 1px;
	overflow: hidden;
	background-color: $top;
	border-bottom: 1px solid $bottom;
}

// Button backgrounds
// ------------------
@mixin buttonBackground($btnBg, $hoverColor: $btnBg) {
	background-color: $btnBg;
	&:hover, &:active, &.active, &.disabled, &[disabled], &:focus {
		background-color: darken($btnBg, 10%);
	}

}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
	margin-top: ($navbarHeight - $elementHeight) / 2;
}



// Placeholder @mixin for Sass
// -----------

@mixin placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&::-webkit-input-placeholder { @content;
	}
}



// Animations

@mixin keyframes($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }
    @-moz-keyframes #{$animation_name} {
        @content;
    }
    @-o-keyframes #{$animation_name} {
        @content;
    }
    @keyframes #{$animation_name} {
        @content;
    }
}


// sass
@mixin rotate($degrees) {
    -moz-transform: rotate($degrees);
    -o-transform: rotate($degrees);
    -webkit-transform: rotate($degrees);
    filter:  unquote("progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})");
    -ms-filter: unquote("progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})");
    zoom: 1;
}


@mixin arrow($direction, $bg-color, $border-color: transparent, $width: 10px, $isCenter : false, $borderSize: 1) {
	&:after, &:before {
		content: "\00a0";
		// reduce the damage in FF3.0:
		display: block;
		position: absolute;
		width: 0;
		height: 0;
		border-width: floor($width);
		border-style: solid;
		@if $direction == "top" {
			top: 0;
			margin-top: -$width * 2 + $borderSize;
			border-color: transparent transparent $bg-color transparent;
			@if $isCenter == true { left: 50%; margin-left:-$width; }
		}
		@if $direction == "bottom" {
			bottom: 0;
			margin-bottom: -$width * 2 + $borderSize;
			border-color: $bg-color transparent transparent transparent;
			@if $isCenter == true { left: 50%; margin-left:-$width; }
		}
		@if $direction == "left" {
			left: 0;
			margin-left: -$width * 2 + $borderSize;
			border-color: transparent $bg-color transparent transparent;
			@if $isCenter == true { top: 50%; margin-top:-$width; }
		// creates the smaller  triangle
		}
		@if $direction == "right" {
			right: 0;
			margin-right: -$width * 2 + $borderSize;
			border-color: transparent transparent transparent $bg-color;
			@if $isCenter == true { top: 50%; margin-top:-$width; }
		}
	}
	&:before {
		@if $direction == "top" {
			margin-top: -$width * 2;
			border-color: transparent transparent $border-color transparent;
		}
		@if $direction == "bottom" {
			margin-bottom: -$width * 2;
			border-color: $border-color transparent transparent transparent;
		}
		@if $direction == "left" {
			margin-left: -$width * 2;
			border-color: transparent $border-color transparent transparent;
		}
		@if $direction == "right" {
			margin-right: -$width * 2;
			border-color: transparent transparent transparent $border-color;
		}
	}
}

// gives included element arrow on the reverted side
@mixin Btn__rounded-arrow($height, $color, $hover: true) {
	$bHeight: $height / 2.5;
	position: relative;
	padding-right:15px;
	&:before {
		content: " ";
		position: absolute;

		left: 100%;
		top: 0;
		width: 0;
		height: 0;


		border-radius: 0 4px 4px 4px;
		@include transform(rotate(-45deg));
		@include transform-origin(bottom);
		border: $bHeight solid $color;
		margin-left: -5px;
	}
	@if($hover) {
		&:hover:before {
			border: $bHeight solid darken($color, 10%);
		}
	}
}




@function htmlDirection(){
	@if ($htmlDirection == ltr) {
		@return left;
	} @else {
		@return right;
	}
}
@function htmlDirection-rev(){
	@if ($htmlDirection == ltr) {
		@return right;
	} @else {
		@return left;
	}
}


// CSS-only multi-line ellipsis with generated content
// yields `position:relative`, so remember to declare an eventual `position:absolute/fixed` *after* including this mixin
@mixin limitLines($maxLinesPortrait) {
	position: relative;
	overflow: hidden;

	// root element class added via JS feature detection
	.webkit-line-clamp & {
		text-overflow: ellipsis;
		display: -webkit-box;
		-webkit-box-orient: vertical;

		// always remember:
		// http://alistapart.com/article/every-time-you-call-a-proprietary-feature-css3-a-kitten-dies
		-webkit-line-clamp: $maxLinesPortrait;

	}

}

